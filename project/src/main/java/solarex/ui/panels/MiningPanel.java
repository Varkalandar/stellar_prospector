/*
 * MiningPanel.java
 *
 * Created on 2012/11/05
 *
 * Author: Hj. Malthaner
 * Email:  h_malthaner@users.sourceforge.net
 *
 * See license.txt for license details
 */
package solarex.ui.panels;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.Observable;
import java.util.Observer;
import solarex.ship.Ship;
import solarex.ship.components.ShipComponent;
import solarex.system.PlanetMiningData;
import solarex.system.PlanetResources;
import solarex.system.Solar;
import solarex.ui.ImageCache;
import solarex.ui.components.PlanetMiningGridPanel;
import solarex.ui.ComponentFactory;
import solarex.ui.FontFactory;

/**
 * Mining actions control panel.
 * 
 * @author Hj. Malthaner
 */
public class MiningPanel extends javax.swing.JPanel implements Observer
{
    private PlanetMiningGridPanel panel;
    private PlanetDetailPanel planetViewPanel;
    private Ship ship;
    private final ShipComponent drone;
    
    /**
     * Creates new form MiningPanel
     */
    public MiningPanel(Solar planet, Ship ship, ImageCache imageCache, ShipComponent drone, PlanetDetailPanel planetViewPanel)
    {
        this.planetViewPanel = planetViewPanel;
        this.ship = ship;
        this.drone = drone;
        
        initComponents();

        jLabel1.setFont(FontFactory.getPanelHeading());
        jLabel2.setFont(FontFactory.getPanelHeading());
        
        droneReportLabel.setBackground(ComponentFactory.boxBackground);
        droneReportLabel.setFont(FontFactory.getLarger());
        quadrantInfoLabel.setBackground(ComponentFactory.boxBackground);
        quadrantInfoLabel.setFont(FontFactory.getLarger());
        
        updateDroneDurabilityInfo();
        
        panel = new PlanetMiningGridPanel(planet, ship, imageCache, drone, this);
        
        Dimension size = new Dimension(800, 310);
        panel.setPreferredSize(size);
        panel.setMaximumSize(size);
        panel.setMaximumSize(size);
        
        miningControlPanel.add(panel, BorderLayout.CENTER);
        
        ComponentFactory.customizeButton(dronePanelButton);
        ComponentFactory.customizeButton(miningButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        innerPanel = new javax.swing.JPanel();
        miningControlPanel = new javax.swing.JPanel();
        left = new javax.swing.JPanel();
        right = new javax.swing.JPanel();
        south = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        quadrantInfoLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        droneReportLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        dronePanelButton = new javax.swing.JButton();
        miningButton = new javax.swing.JButton();
        north = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(java.awt.Color.black);
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        innerPanel.setBackground(java.awt.Color.black);
        innerPanel.setPreferredSize(new java.awt.Dimension(822, 619));
        innerPanel.setLayout(new java.awt.BorderLayout());

        miningControlPanel.setBackground(new java.awt.Color(0, 0, 0));
        miningControlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));
        miningControlPanel.setForeground(java.awt.Color.green);
        miningControlPanel.setPreferredSize(new java.awt.Dimension(802, 602));
        miningControlPanel.setLayout(new java.awt.BorderLayout());
        innerPanel.add(miningControlPanel, java.awt.BorderLayout.CENTER);

        left.setBackground(new java.awt.Color(0, 0, 51));
        left.setOpaque(false);
        left.setPreferredSize(new java.awt.Dimension(32, 200));
        left.setLayout(new java.awt.GridBagLayout());
        innerPanel.add(left, java.awt.BorderLayout.WEST);

        right.setBackground(new java.awt.Color(0, 0, 51));
        right.setOpaque(false);
        right.setPreferredSize(new java.awt.Dimension(32, 200));
        right.setLayout(new java.awt.GridBagLayout());
        innerPanel.add(right, java.awt.BorderLayout.EAST);

        south.setBackground(new java.awt.Color(0, 0, 51));
        south.setOpaque(false);
        south.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(java.awt.Color.darkGray);
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(128, 128, 128)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        quadrantInfoLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        quadrantInfoLabel.setForeground(java.awt.Color.lightGray);
        quadrantInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        quadrantInfoLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        quadrantInfoLabel.setOpaque(true);
        quadrantInfoLabel.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanel1.add(quadrantInfoLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 32, 10, 5);
        south.add(jPanel1, gridBagConstraints);

        jPanel2.setBackground(java.awt.Color.darkGray);
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(128, 128, 128)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        droneReportLabel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        droneReportLabel.setForeground(java.awt.Color.lightGray);
        droneReportLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        droneReportLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        droneReportLabel.setOpaque(true);
        droneReportLabel.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanel2.add(droneReportLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 32);
        south.add(jPanel2, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        dronePanelButton.setText("Drone Selection");
        dronePanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dronePanelButtonActionPerformed(evt);
            }
        });
        jPanel3.add(dronePanelButton);

        miningButton.setText("Activate Drone");
        miningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miningButtonActionPerformed(evt);
            }
        });
        jPanel3.add(miningButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        south.add(jPanel3, gridBagConstraints);

        innerPanel.add(south, java.awt.BorderLayout.SOUTH);

        north.setBackground(new java.awt.Color(0, 0, 51));
        north.setOpaque(false);
        north.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.green);
        jLabel1.setText("  Drone Status:");
        north.add(jLabel1);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.yellow);
        jLabel2.setText("92/100 Durability, 54% Fuel");
        north.add(jLabel2);

        innerPanel.add(north, java.awt.BorderLayout.NORTH);

        add(innerPanel, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void dronePanelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dronePanelButtonActionPerformed
    {//GEN-HEADEREND:event_dronePanelButtonActionPerformed
        planetViewPanel.switchToPlanetView();
    }//GEN-LAST:event_dronePanelButtonActionPerformed

    private void miningButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_miningButtonActionPerformed
    {//GEN-HEADEREND:event_miningButtonActionPerformed
        panel.doMining();
    }//GEN-LAST:event_miningButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dronePanelButton;
    private javax.swing.JLabel droneReportLabel;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel left;
    private javax.swing.JButton miningButton;
    private javax.swing.JPanel miningControlPanel;
    private javax.swing.JPanel north;
    private javax.swing.JLabel quadrantInfoLabel;
    private javax.swing.JPanel right;
    private javax.swing.JPanel south;
    // End of variables declaration//GEN-END:variables

    @Override
    /**
     * <p>Possible parameter types:</p>
     * - PlanetMiningData.Surface: Drone (surface) examination report<br>
     * - String: just display the message in the drone report label<br>
     * - int [] drone gathering result.<br>
     */
    public void update(Observable o, Object arg)
    {
        if(arg instanceof PlanetMiningData.Surface)
        {
            PlanetMiningData.Surface surface = (PlanetMiningData.Surface)arg;
            String text;
            
            switch(surface)
            {
                case FLUID:
                    text = "<html> Current Quadrant:<br><br> Fluid covered surface.</html>";
                    break;
                case FLUID_ICE:
                    text = "<html> Current Quadrant:<br><br> Surface is a mix of fluids and ice.</html>";
                    break;
                case FLUID_ROCKS:
                    text = "<html> Current Quadrant:<br><br> Fluid covered surface with rocky islands.</html>";
                    break;
                case FLUID_ICE_ROCKS:
                    text = "<html> Current Quadrant:<br><br> Fluid covered surface with icy and rocky areas.</html>";
                    break;
                case ICE:
                    text = "<html> Current Quadrant:<br><br> Ice covered surface.</html>";
                    break;
                case ICE_ROCKS:
                    text = "<html> Current Quadrant:<br><br> Rocky surface with ice covered areas.</html>";
                    break;
                case ROCKS:
                    text = "<html> Current Quadrant:<br><br> Solid rocky surface.</html>";
                    break;
                default:
                    text = "<html> Current Quadrant:<br><br> Nothing known.</html>";
            }
            
            
            quadrantInfoLabel.setText(text);
        }
        
        if(arg instanceof String)
        {
            droneReportLabel.setText((String)arg);
        }
        
        if(arg instanceof int [])
        {
            // Hajo: only add to cargo if there is space availbale
            if(ship.cargo.availableSpace() > 0)
            {
                // Hajo: drone type?
                if(drone.getName().contains("Gas Filtration Drone"))
                {
                    droneGasFiltrationResult((int [])arg);
                }
                else if(drone.getName().contains("Fluid Distillation Drone"))
                {
                    droneFluidDistillationResult((int [])arg);
                }
                else
                {
                    droneMiningResult((int [])arg);
                }
            } 
            else
            {
                String text;
                text = "<html>Drone Report:<br><br>" + 
                       "Your ship's cargo hold is full.</html>";
                droneReportLabel.setText(text);
            }
        }
        
        updateDroneDurabilityInfo();        
    }

    private void droneMiningResult(int [] deposits)
    {
        String text = "<html>Drone Mining Report:<br><br>";
        PlanetResources.Metals [] values = PlanetResources.Metals.values();

        boolean found = false;

        for(int i=0; i<deposits.length; i++) 
        {
            if(deposits[i] != 0)
            {
                found = true;

                final int n = PlanetResources.metalToGood(i);

                final int massPerUnit =  ship.cargo.goods[n].type.massPerUnit;
                final int amount = Math.min(ship.cargo.availableSpace() * 1000 / massPerUnit, 
                                            deposits[i]);

                if(amount > 0)
                {
                    ship.cargo.goods[n].units += amount;
                    text += "" + amount + " units of <font color=" + values[i].color + ">" +
                            values[i].name().toLowerCase() + "</font> mined.<br>";
                }
            }
        }

        if(!found)
        {
            text = "<html>Drone Mining Report:<br><br>"
                    + "Could not mine any metals.</html>";
        }
        

        text += "</html>";

        droneReportLabel.setText(text);
    }

    private void droneGasFiltrationResult(int[] deposits)
    {
        String text = "<html>Drone Gas Filtration Report:<br><br>";
        PlanetResources.Gases [] values = PlanetResources.Gases.values();
        boolean found = false;

        for(int i=0; i<deposits.length; i++) 
        {
            if(deposits[i] != 0)
            {
                text += "" + deposits[i] + " units of <font color=" + values[i].color + ">" +
                        values[i].name().toLowerCase() + "</font> harvested.<br>";
                found = true;

                final int n = PlanetResources.gasToGood(i);

                ship.cargo.goods[n].units += deposits[i];
            }
        }

        if(!found)
        {
            text = "<html>Drone Mining Report:<br><br>"
                    + "Could not filtrate any gases.";
        }

        text += "<html>";

        droneReportLabel.setText(text);
        
    }

    private void droneFluidDistillationResult(int[] deposits)
    {
        String text = "<html>Drone Fluid Distillation Report:<br><br>";
        PlanetResources.Fluids [] values = PlanetResources.Fluids.values();
        boolean found = false;

        for(int i=0; i<deposits.length; i++) 
        {
            if(deposits[i] != 0)
            {
                text += "" + deposits[i] + " units of <font color=" + values[i].color + ">" +
                        values[i].name().toLowerCase() + "</font> distilled.<br>";
                found = true;

                final int n = PlanetResources.fluidToGood(i);

                ship.cargo.goods[n].units += deposits[i];
            }
        }

        if(!found)
        {
            text = "<html>Drone Mining Report:<br><br>"
                    + "Could not distill any fluids.";
        }

        text += "<html>";

        droneReportLabel.setText(text);
        
    }

    private void updateDroneDurabilityInfo() 
    {
        jLabel2.setText("" +
                drone.getCurrentDurability() + 
                "/" +
                drone.getMaxDurability() +
                " Durability, 54% Fuel");
    }
}
