/*
 * BulletinBoardPanel.java
 *
 * Created: 23.04.2010
 *
 * Author: Hj. Malthaner
 * Email:  h_malthaner@users.sourceforge.net
 *
 * See license.txt for license details
 */

package solarex.ui.panels;

import java.awt.Container;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import solarex.evolution.World;
import solarex.galaxy.Galaxy;
import solarex.quest.Delivery;
import solarex.quest.Donation;
import solarex.quest.Offering;
import solarex.quest.Quest;
import solarex.quest.WantedResource;
import solarex.ship.Cargo;
import solarex.ship.Good;
import solarex.ship.Ship;
import solarex.system.Society;
import solarex.system.Society.Race;
import solarex.system.Solar;
import solarex.ui.ImageCache;
import solarex.ui.components.QuestWrapper;
import solarex.util.ClockThread;
import solarex.ui.ComponentFactory;
import solarex.ui.FontFactory;
import solarex.util.Status;
import solarex.util.RandomHelper;

/**
 * Quests, jobs and trade offers are found through the bulletin board.
 * 
 * @author Hj. Malthaner
 */
public class BulletinBoardPanel extends javax.swing.JPanel
{
    private final Ship ship;
    private final Solar station;
    private final Galaxy galaxy;
    private final World world;
    
    private SpaceStationPanel spaceStationPanel;
    private final ImageCache imageCache;

    /** Creates new form BulletinBoardPanel */
    public BulletinBoardPanel(ImageCache imageCache,
                              World world,
                              Galaxy galaxy, 
                              Solar station, 
                              SpaceStationPanel spaceStationPanel,
                              Ship ship)
    {
        this.imageCache = imageCache;
        this.world = world;
        this.spaceStationPanel = spaceStationPanel;
        this.ship = ship;
        this.station = station;
        this.galaxy = galaxy;
        
        initComponents();
        
        titleLabel.setText(station.name + " Bulletin Board");
        titleLabel.setFont(FontFactory.getPanelHeading());
        
        jLabel3.setFont(FontFactory.getLarger());
        jLabel3.setBackground(ComponentFactory.boxBackground);

        jLabel1.setFont(FontFactory.getLabelHeading());
        jLabel2.setFont(FontFactory.getLabelHeading());
        jLabel4.setFont(FontFactory.getLabelHeading());
        
        ComponentFactory.customizeButton(acceptButton);
        ComponentFactory.customizeButton(declineButton);
        ComponentFactory.customizeButton(loungeButton);
        
        ComponentFactory.customizeScrollpane(jScrollPane1);
        ComponentFactory.customizeList(acceptedList,1 );
        ComponentFactory.customizeList(newsList, 1);
        
        buildOfferList(galaxy, station, ship);
        fillQuestsList(ship);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newsList = new javax.swing.JList();
        loungeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        declineButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        acceptedList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(java.awt.Color.black);
        setForeground(java.awt.Color.green);
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        contentPanel.setBackground(new java.awt.Color(0, 51, 51));
        contentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.darkGray));
        contentPanel.setForeground(java.awt.Color.green);
        contentPanel.setMinimumSize(new java.awt.Dimension(800, 600));
        contentPanel.setPreferredSize(new java.awt.Dimension(800, 540));
        contentPanel.setLayout(null);

        titleLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        titleLabel.setForeground(java.awt.Color.white);
        titleLabel.setText("XYZ Bulletin Board");
        contentPanel.add(titleLabel);
        titleLabel.setBounds(20, 10, 420, 40);

        jScrollPane1.setBackground(java.awt.Color.darkGray);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        newsList.setBackground(java.awt.Color.darkGray);
        newsList.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 2, 1));
        newsList.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        newsList.setForeground(java.awt.Color.lightGray);
        newsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        newsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        newsList.setFixedCellHeight(20);
        newsList.setSelectionBackground(new java.awt.Color(0, 0, 51));
        newsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                newsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(newsList);

        contentPanel.add(jScrollPane1);
        jScrollPane1.setBounds(20, 90, 360, 390);

        loungeButton.setText("Return To Lounge");
        loungeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loungeButtonActionPerformed(evt);
            }
        });
        contentPanel.add(loungeButton);
        loungeButton.setBounds(20, 500, 180, 25);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel1.setForeground(java.awt.Color.green);
        jLabel1.setText("Accepted Jobs");
        contentPanel.add(jLabel1);
        jLabel1.setBounds(410, 260, 310, 18);

        declineButton.setText("Decline");
        declineButton.setEnabled(false);
        contentPanel.add(declineButton);
        declineButton.setBounds(620, 210, 110, 25);

        acceptButton.setText("Accept");
        acceptButton.setEnabled(false);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });
        contentPanel.add(acceptButton);
        acceptButton.setBounds(450, 210, 110, 25);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel2.setForeground(java.awt.Color.green);
        jLabel2.setText("Offers, requests, jobs and quests");
        contentPanel.add(jLabel2);
        jLabel2.setBounds(20, 60, 310, 18);

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel4.setForeground(java.awt.Color.green);
        jLabel4.setText("Details");
        contentPanel.add(jLabel4);
        jLabel4.setBounds(410, 60, 310, 18);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));

        acceptedList.setBackground(java.awt.Color.darkGray);
        acceptedList.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 2, 1));
        acceptedList.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        acceptedList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(acceptedList);

        contentPanel.add(jScrollPane2);
        jScrollPane2.setBounds(410, 290, 360, 190);

        jPanel1.setBackground(java.awt.Color.darkGray);
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel3.setBackground(java.awt.Color.darkGray);
        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setForeground(java.awt.Color.lightGray);
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 2, 1));
        jLabel3.setOpaque(true);
        jPanel1.add(jLabel3, java.awt.BorderLayout.CENTER);

        contentPanel.add(jPanel1);
        jPanel1.setBounds(410, 90, 360, 100);

        add(contentPanel, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void loungeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loungeButtonActionPerformed
        Container c = getParent();
        c.remove(this);
        c.add(spaceStationPanel);
        c.validate();
        c.repaint();
}//GEN-LAST:event_loungeButtonActionPerformed

    private void newsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_newsListValueChanged
        Object o = newsList.getSelectedValue();
        
        if(o != null)
        {
            QuestWrapper w = (QuestWrapper)o;
            Quest q = w.quest;
            
            jLabel3.setText(q.getQuestDetails());
        }
        acceptButton.setEnabled(o != null);
        declineButton.setEnabled(o != null);
    }//GEN-LAST:event_newsListValueChanged

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        Object o = newsList.getSelectedValue();
        
        if(o != null)
        {
            QuestWrapper w = (QuestWrapper)o;
            Quest quest = w.quest;
            
            Status problem = quest.isAcceptable(ship);
            
            if(problem != Status.OK)
            {
                JOptionPane.showMessageDialog(this, problem.message);
            }
            else
            {
                boolean ok = quest.testSolved(galaxy, station, ship);

                if(ok)
                {
                    jLabel3.setText("");
                    quest.showSuccessMessage(null);
                }
                else
                {
                    ship.player.addQuest(quest);
                    DefaultListModel m = (DefaultListModel)acceptedList.getModel();
                    m.addElement(w);                
                }

                DefaultListModel model = (DefaultListModel)newsList.getModel();
                model.removeElement(o);
            }
        }
    }//GEN-LAST:event_acceptButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JList acceptedList;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton declineButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loungeButton;
    private javax.swing.JList newsList;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private void buildOfferList(Galaxy galaxy, Solar station, Ship ship) 
    {
        final int day = ClockThread.getDayOfGame();
        
        final Random rng = RandomHelper.createRNG(day + station.seed + station.name.hashCode());
        
        final List <Solar> settlements = galaxy.findSettlements(1, station.loca);

        final Cargo cargo = TradePanel.createCargo(station);

        final ArrayList <Good> rareGoods = new ArrayList();

        for(int i=0; i<Good.Type.values().length; i++)
        {
            if(cargo.goods[i].units == 0)
            {
                rareGoods.add(cargo.goods[i]);
            }
        }

        final DefaultListModel model = new DefaultListModel();
        Offering offering = new Offering(world, imageCache);
        model.addElement(new QuestWrapper(offering));
                        
        // Hajo: the more population lives here, the more
        // jobs and quests should be available.
        
        final long population = station.society.population + 1;
        
        for(Solar solar : settlements)
        {
            final int n1 = rng.nextInt(6000 + (int)(20000000/population));
            final int n2 = rng.nextInt(6000 + (int)(20000000/population));
            final int n = (n1+n2) / 2;
            final int level = rng.nextInt(2000);
            Quest quest = null;
            
            if(n < 1100)
            {
                quest = new Delivery(level, solar);
                
                if(ship.player.getQuests().contains(quest))
                {
                    // Hajo: we have this quest already
                    quest = null;
                }
            }
            else if(n < 1200)
            {
                if(!rareGoods.isEmpty())
                {
                    Good good = rareGoods.get(rng.nextInt(rareGoods.size()));
                    
                    if(cargo.illegalGoods[good.type.ordinal()])
                    {
                        // request illegal good
                        quest = new WantedResource(-level/2, good);
                    }
                    else
                    {
                        // request legal but rare good
                        quest = new WantedResource(level, good);
                    }
                }
            }
            else 
            {
                // Hajo: other quest types?
            }
            
            if(quest != null)
            {
                // System.err.println(message);
                model.addElement(new QuestWrapper(quest));
            }
        }
        
        addDonations(model);

        newsList.setModel(model);
    }

    private void fillQuestsList(Ship ship)
    {
        DefaultListModel model = new DefaultListModel();

        for(Quest quest : ship.player.getQuests())
        {
            QuestWrapper w = new QuestWrapper(quest);
            model.addElement(w);
        }
        
        acceptedList.setModel(model);
    }

    private void addDonations(DefaultListModel model)
    {
        Donation donation;
        
        boolean supportOrphans = true;
        boolean supportPets = true;
        boolean supportMedcare = true;
        
        if(station.society.race == Race.Clonkniks)
        {
            supportOrphans = supportPets = supportMedcare = false;
        }
        
        if(station.society.governmentType == Society.GovernmentType.Theocracy)
        {
            supportMedcare = false;
        }
        
        
        if(supportOrphans)
        {
            donation = new Donation("Please donate to the local orphanage.");
            model.addElement(new QuestWrapper(donation));
        }
        
        if(supportPets)
        {
            donation = new Donation("Please donate to the pet shelter network.");
            model.addElement(new QuestWrapper(donation));
        }
        
        if(supportMedcare)
        {
            donation = new Donation("Fight illness, donate to medcare interstellar.");
            model.addElement(new QuestWrapper(donation));
        }

        if(station.society.governmentType == Society.GovernmentType.Anarchy)
        {
            donation = new Donation("Fight anarchy. Support private security!");
            model.addElement(new QuestWrapper(donation));
        }
        
        if(station.society.governmentType == Society.GovernmentType.Dictatorship)
        {
            donation = new Donation("You like freedom? Support us!");
            model.addElement(new QuestWrapper(donation));
        }
        
        if(station.society.governmentType == Society.GovernmentType.Communism &&
           station.society.race != Race.Clonkniks)
        {
            donation = new Donation("Want to support our community? We share donations equally.");
            model.addElement(new QuestWrapper(donation));
        }
        
        if(station.society.race == Race.Clonkniks)
        {
            donation = new Donation("A donation now will earn you bonus repair points later.");
            model.addElement(new QuestWrapper(donation));
        }
    }
}
